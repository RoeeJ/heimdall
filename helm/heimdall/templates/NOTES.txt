1. Get the application URL by running these commands:
{{- if and .Values.ingress .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "heimdall.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "heimdall.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "heimdall.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo DNS Server: $SERVICE_IP:{{ .Values.service.dnsPort }}
  echo HTTP API: http://$SERVICE_IP:{{ .Values.service.httpPort }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "heimdall.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Test DNS resolution:
  # Using the LoadBalancer IP
  dig google.com @$SERVICE_IP -p {{ .Values.service.dnsPort }}
  
  # Using TCP
  dig google.com @$SERVICE_IP -p {{ .Values.service.dnsPort }} +tcp

3. Check health status:
  curl http://$SERVICE_IP:{{ .Values.service.httpPort }}/health
  curl http://$SERVICE_IP:{{ .Values.service.httpPort }}/health/detailed

4. View metrics:
  curl http://$SERVICE_IP:{{ .Values.service.httpPort }}/metrics

IMPORTANT NOTES:
- Health checks are performed via HTTP endpoint (port {{ .Values.service.httpPort }})
- The container image uses distroless base, so shell-based exec probes are not supported
- Always use httpGet probes pointing to /health or /health/detailed
- The DNS server binds to port 1053 inside the container, exposed as port {{ .Values.service.dnsPort }}