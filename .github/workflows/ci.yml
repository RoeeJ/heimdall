name: Heimdall DNS Server CI/CD

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      skip_performance_tests:
        description: 'Skip performance regression tests'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: 1

jobs:
  # Job 1: Code Quality and Basic Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
        include:
          - rust: stable
            features: "--all-features"
          - rust: beta
            features: "--all-features"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for performance comparison

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: test-${{ matrix.rust }}
        cache-on-failure: true
        cache-all-crates: true

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --workspace --all-targets ${{ matrix.features }} -- -D warnings

    - name: Run unit tests
      run: cargo test --workspace ${{ matrix.features }} --verbose

    - name: Test documentation
      run: cargo test --doc ${{ matrix.features }}

    - name: Build all binaries
      run: |
        cargo build --bin heimdall ${{ matrix.features }}
        cargo build --bin stress_test ${{ matrix.features }}
        cargo build --bin regression_test ${{ matrix.features }}

  # Job 2: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: security
        cache-on-failure: true

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Check for vulnerable dependencies
      run: cargo audit --deny warnings

  # Job 3: Performance Regression Tests
  performance:
    name: Performance Regression
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_performance_tests != 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: performance
        cache-on-failure: true

    - name: Build release binaries
      run: |
        cargo build --release --bin regression_test
        cargo build --release --bin heimdall
        cargo build --release --bin stress_test

    - name: Setup performance baseline
      run: |
        mkdir -p benchmarks
        # Check if baseline exists, if not create one for this run
        if [ ! -f benchmarks/baseline.json ]; then
          echo "Creating performance baseline..."
          ./scripts/check_performance.sh --create-baseline
        fi

    - name: Run performance regression tests
      run: |
        chmod +x scripts/check_performance.sh
        ./scripts/check_performance.sh --max-regression 15.0

    - name: Run criterion benchmarks
      run: cargo bench --bench dns_parsing

    - name: Archive performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          benchmarks/
          target/criterion/
        retention-days: 30

  # Job 4: Build Matrix (Multiple platforms and configurations)
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        mode: [debug, release]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: build-${{ matrix.os }}-${{ matrix.mode }}
        cache-on-failure: true

    - name: Build in debug mode
      if: matrix.mode == 'debug'
      run: cargo build --target ${{ matrix.target }} --verbose

    - name: Build in release mode
      if: matrix.mode == 'release'
      run: cargo build --release --target ${{ matrix.target }} --verbose

    - name: Upload build artifacts (Release only)
      if: matrix.mode == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: heimdall-${{ matrix.target }}
        path: |
          target/${{ matrix.target }}/release/heimdall*
          target/${{ matrix.target }}/release/stress_test*
          target/${{ matrix.target }}/release/regression_test*
        retention-days: 30

  # Job 5: Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, build]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: integration
        cache-on-failure: true

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y dnsutils netcat-openbsd

    - name: Build integration test binaries
      run: cargo build --release --bin heimdall --bin stress_test

    - name: Run integration tests
      run: cargo test --test integration_test --release

    - name: Start DNS server and run basic tests
      run: |
        # Start the DNS server in background
        ./target/release/heimdall &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 2
        
        # Test basic DNS functionality
        dig google.com @127.0.0.1 -p 1053 +short || echo "DNS query test completed"
        
        # Run light stress test
        timeout 30s ./target/release/stress_test --scenario light --server 127.0.0.1:1053 || echo "Stress test completed"
        
        # Cleanup
        kill $SERVER_PID || true

  # Job 6: Docker Build and Push
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        # Multi-stage Dockerfile for Heimdall DNS Server
        FROM rust:1.75-slim as builder
        
        WORKDIR /app
        
        # Install system dependencies needed for building
        RUN apt-get update && apt-get install -y \
            pkg-config \
            libssl-dev \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy source code
        COPY . .
        
        # Build the application in release mode
        RUN cargo build --release --bin heimdall
        
        # Runtime stage
        FROM debian:bookworm-slim
        
        # Install runtime dependencies
        RUN apt-get update && apt-get install -y \
            ca-certificates \
            && rm -rf /var/lib/apt/lists/*
        
        # Create heimdall user
        RUN useradd -r -s /bin/false heimdall
        
        # Copy the binary from builder stage
        COPY --from=builder /app/target/release/heimdall /usr/local/bin/heimdall
        
        # Set ownership and permissions
        RUN chown heimdall:heimdall /usr/local/bin/heimdall
        
        # Switch to non-root user
        USER heimdall
        
        # Expose DNS port
        EXPOSE 1053/udp
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD timeout 2s bash -c '</dev/tcp/localhost/1053' || exit 1
        
        # Run the DNS server
        CMD ["heimdall"]
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 7: Coverage Report
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: coverage
        cache-on-failure: true

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  # Job 8: Release (Only on tags)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, security, performance, build, integration, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create release archives
      run: |
        cd artifacts
        for dir in heimdall-*; do
          if [ -d "$dir" ]; then
            cd "$dir"
            tar -czf "../${dir}.tar.gz" *
            cd ..
          fi
        done

    - name: Generate changelog
      run: |
        # Simple changelog generation
        echo "## Changes" > CHANGELOG.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*.tar.gz
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 9: Deployment Status
  deployment-status:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [test, security, performance, build, integration, docker]
    if: always()
    
    steps:
    - name: Check deployment status
      run: |
        echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance | ${{ needs.performance.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration | ${{ needs.integration.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test.result }}" == "success" && 
              "${{ needs.security.result }}" == "success" && 
              "${{ needs.build.result }}" == "success" ]]; then
          echo "✅ Pipeline completed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Pipeline failed - check individual jobs" >> $GITHUB_STEP_SUMMARY
        fi